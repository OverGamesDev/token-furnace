import "std/nft_collection_interface"
Contract TokenFurnace(
    nftTemplateId: ByteVec,
    collectionUri: ByteVec,
    mut totalSupply: U256
  ) implements INFTCollection {

   event Burned(caller: Address, tokenBurned: ByteVec, amount: U256, nft: Bool, timestamp: U256)

    enum ErrorCodes {
      IncorrectTokenIndex = 0
      NFTNotFound = 1
      NFTNotPartOfCollection = 2
      TokenIdNotAccepted = 4
      CannotBurnZero = 5
    }


   @using(assetsInContract = false, preapprovedAssets = true, checkExternalCaller = false)
   pub fn burn(tokenIdToBurn: ByteVec, amountToBurn: U256, withNft: Bool) -> (){
      let caller = callerAddress!()
      assert!(tokenIdToBurn != ALPH , ErrorCodes.TokenIdNotAccepted)
      assert!(amountToBurn > 0, ErrorCodes.CannotBurnZero)
      
      if(withNft){
        let _ =  mint{caller -> ALPH: minimalContractDeposit!()}(tokenIdToBurn, amountToBurn, caller)
      }

      emit Burned(caller, tokenIdToBurn, amountToBurn, withNft, blockTimeStamp!())
      burnToken!(caller, tokenIdToBurn, amountToBurn)
   }

   @using(preapprovedAssets = true, updateFields = true)
   fn mint(tokenIdBurned: ByteVec, amountBurned: U256, burnerCaller: Address) -> (ByteVec) {

     let (initialImmState, initialMutState) = BurnerNFT.encodeFields!(selfContractId!(), totalSupply, tokenIdBurned, amountBurned)
 
     let contractId = copyCreateSubContractWithToken!{burnerCaller -> ALPH: minimalContractDeposit!()}(
         toByteVec!(totalSupply),
         nftTemplateId,
         initialImmState,
         initialMutState,
         1,
         burnerCaller
     )
 
     totalSupply = totalSupply + 1
     return contractId
   }

 // collection png https://arweave.net/hoxK8xC9wRjD_6HiOzhdY2jW0ZnJoF2f0N4FcSLXqzQ
 // collection json https://arweave.net/Z1HAdT_PGnxPLct4-u7l1Zl_h4DNdxzKev7tCDAEflc

    pub fn getCollectionUri() -> ByteVec {
        return collectionUri
    }
    
    pub fn totalSupply() -> U256 {
        return totalSupply
    }


    pub fn nftByIndex(index: U256) -> INFT {
        checkCaller!(index < totalSupply(), ErrorCodes.IncorrectTokenIndex)
    
        let nftTokenId = subContractId!(toByteVec!(index))
        assert!(contractExists!(nftTokenId), ErrorCodes.NFTNotFound)
    
        return INFT(nftTokenId)
    }

    pub fn validateNFT(nftId: ByteVec, nftIndex: U256) -> () {
        let expectedTokenContract =  nftByIndex(nftIndex)
        assert!(nftId == contractId!(expectedTokenContract), ErrorCodes.NFTNotPartOfCollection)
    }

}
